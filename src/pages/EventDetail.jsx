// src/pages/EventDetail.jsx
import { useParams, Link } from "react-router-dom";
import { useState, useEffect, useMemo } from "react";
import { supabase } from "../supabaseClient";
 
export default function EventDetail() {
  const { id } = useParams();
  const [event, setEvent] = useState(null);
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState("");
  const [ticketType, setTicketType] = useState("VIP");
  const [quantity, setQuantity] = useState(1);
  const [booking, setBooking] = useState(false);
  const [showSummary, setShowSummary] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState("PromptPay");
  const [ticketRecord, setTicketRecord] = useState(null);
 
  useEffect(() => {
    fetchEvent();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [id]);
 
  async function fetchEvent() {
    setLoading(true);
    setErr("");
    const { data, error } = await supabase
      .from("events")
      .select("*")
      .eq("id", id)
      .single();
 
    if (error) {
      console.error(error);
      setErr("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    } else {
      setEvent(data || null);
    }
    setLoading(false);
  }
 
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏•‡∏∞ JSON
  const priceTable = useMemo(() => {
    if (!event) return {};
    // ‡∏ñ‡πâ‡∏≤ event.price ‡πÄ‡∏õ‡πá‡∏ô object/JSONB
    if (event.price && typeof event.price === "object") return event.price;
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠ ticket_prices
    if (event.ticket_prices && typeof event.ticket_prices === "object")
      return event.ticket_prices;
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó "STANDARD"
    if (typeof event?.price === "number")
      return { STANDARD: event.price };
    // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÄ‡∏õ‡πá‡∏ô string JSON
    try {
      if (typeof event?.price === "string") {
        const parsed = JSON.parse(event.price);
        if (parsed && typeof parsed === "object") return parsed;
      }
    } catch (_) {}
    return {};
  }, [event]);
 
  // list ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£
  const ticketTypes = useMemo(() => Object.keys(priceTable), [priceTable]);
 
  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ ticketType ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  useEffect(() => {
    if (ticketTypes.length > 0 && !ticketTypes.includes(ticketType)) {
      setTicketType(ticketTypes[0]);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [ticketTypes.join("|")]);
 
  const unitPrice = priceTable?.[ticketType] || 0;
  const totalPrice = Math.max(0, unitPrice * (quantity || 0));
 
  async function bookTickets() {
    if (!event) return;
    if (!ticketType || !priceTable[ticketType]) {
      setErr("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
      return;
    }
    if (!quantity || quantity < 1) {
      setErr("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0");
      return;
    }
 
    setErr("");
    setBooking(true);
 
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á tickets
    const payload = {
      event_id: event.id,
      ticket_type: ticketType,
      quantity,
      total_price: totalPrice,
      payment_method: paymentMethod,
    };
 
    const { data: inserted, error: insertErr } = await supabase
      .from("tickets")
      .insert([payload])
      .select()
      .single();
 
    if (insertErr) {
      console.error(insertErr);
      setErr("‡∏à‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      setBooking(false);
      return;
    }
 
    setTicketRecord(inserted);
 
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î sold (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ)
    try {
      await supabase
        .from("events")
        .update({ sold: (event.sold || 0) + quantity })
        .eq("id", event.id);
    } catch (e) {
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á throw ‡∏ï‡πà‡∏≠ ‚Äî ‡πÅ‡∏Ñ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
      console.warn("update sold failed:", e?.message);
    }
 
    setShowSummary(true);
    setBooking(false);
  }
 
  if (loading) return <p>Loading...</p>;
  if (err && !event) return <p>{err}</p>;
  if (!event) return <p>Event not found</p>;
 
  return (
<div className="container" style={{ maxWidth: 720, margin: "0 auto" }}>
      {!showSummary ? (
<>
<h1 style={{ margin: "8px 0 4px" }}>{event.name}</h1>
<p style={{ margin: 0 }}>üìç {event.location}</p>
          {event.date && <p style={{ marginTop: 4 }}>üìÖ {event.date}</p>}
 
          <div style={{ display: "grid", gap: 12, margin: "16px 0" }}>
<label style={{ display: "grid", gap: 6 }}>
              ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£:
<select
                value={ticketType}
                onChange={(e) => setTicketType(e.target.value)}
                disabled={ticketTypes.length === 0}
                style={{ padding: 8, maxWidth: 260 }}
>
                {ticketTypes.length > 0 ? (
                  ticketTypes.map((type) => (
<option key={type} value={type}>
                      {type} ({priceTable[type]} ‡∏ø)
</option>
                  ))
                ) : (
<option>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤</option>
                )}
</select>
</label>
 
            <label style={{ display: "grid", gap: 6 }}>
              ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:
<input
                type="number"
                min="1"
                value={quantity}
                onChange={(e) =>
                  setQuantity(Math.max(1, Number(e.target.value)))
                }
                style={{ padding: 8, maxWidth: 140 }}
              />
</label>
 
            <div>
<b>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°:</b> {totalPrice.toLocaleString()} ‡∏ø
</div>
 
            <div>
<h4 style={{ margin: "12px 0 6px" }}>‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:</h4>
<label style={{ display: "block", marginBottom: 6 }}>
<input
                  type="radio"
                  name="payment"
                  value="PromptPay"
                  checked={paymentMethod === "PromptPay"}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                />{" "}
                QR PromptPay
</label>
<label style={{ display: "block", marginBottom: 6 }}>
<input
                  type="radio"
                  name="payment"
                  value="CreditCard"
                  checked={paymentMethod === "CreditCard"}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                />{" "}
                ‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
</label>
<label style={{ display: "block" }}>
<input
                  type="radio"
                  name="payment"
                  value="Wallet"
                  checked={paymentMethod === "Wallet"}
                  onChange={(e) => setPaymentMethod(e.target.value)}
                />{" "}
                Wallet
</label>
</div>
 
            {err && <p style={{ color: "crimson" }}>{err}</p>}
 
            <button
              onClick={bookTickets}
              disabled={booking || ticketTypes.length === 0}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-60"
>
              {booking ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏≠‡∏á..." : "‡∏à‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£"}
</button>
</div>
 
          <Link to="/">‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå</Link>
</>
      ) : (
<>
<h2>üßæ ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h2>
<p style={{ marginBottom: 4 }}>{event.name}</p>
<p style={{ margin: 0 }}>
            ‡∏ö‡∏±‡∏ï‡∏£ {ticketType} x {quantity} ‚Üí{" "}
            {totalPrice.toLocaleString()} ‡∏ö‡∏≤‡∏ó
</p>
<p style={{ marginTop: 4 }}>‡∏ä‡∏≥‡∏£‡∏∞‡∏ú‡πà‡∏≤‡∏ô: {paymentMethod}</p>
          {ticketRecord?.id && (
<p style={{ opacity: 0.8 }}>‡∏£‡∏´‡∏±‡∏™‡∏™‡∏•‡∏¥‡∏õ/‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: #{ticketRecord.id}</p>
          )}
<div style={{ marginTop: 12 }}>
<Link to="/">‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå</Link>
</div>
</>
      )}
</div>
  );
}